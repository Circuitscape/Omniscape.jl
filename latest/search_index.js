var documenterSearchIndex = {"docs":
[{"location":"apidocs/#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"apidocs/","page":"API Documentation","title":"API Documentation","text":"run_omniscape\n\nmissingarray\n\nmissingarray_to_array","category":"page"},{"location":"apidocs/#Omniscape.run_omniscape","page":"API Documentation","title":"Omniscape.run_omniscape","text":"INI method:\n\nrun_omniscape(path::String)\n\nIn-memory method:\n\nrun_omniscape(\n    cfg::Dict{String, String}\n    resistance::MissingArray{Number, 2};\n    reclass_table = MissingArray{Float64, 2}(undef, 1, 2),\n    source_strength = source_from_resistance(resistance, cfg, reclass_table),\n    condition1 = MissingArray{Float64, 2}(undef, 1, 1),\n    condition2 = MissingArray{Float64, 2}(undef, 1, 1),\n    condition1_future = MissingArray{Float64, 2}(undef, 1, 1),\n    condition2_future = MissingArray{Float64, 2}(undef, 1, 1),\n    wkt = \"\",\n    geotransform = [0.0, 1.0, 0.0, 0.0, 0.0, -1.0],\n    write_outputs = false\n)\n\nCompute omnidirectional current flow. All array inputs for the in-memory method should be of type MissingArray{T, 2}, which is just an alias for Array{Union{Missing, T}, 2}. missing entries correspond to NoData pixels. If you are starting with an array with a numeric NoData value, use  missingarray to convert it to a MissingArray. \n\nParameters\n\npath: The path to an INI file containing run parameters. See the Settings and Options section of the User Guide for descriptions of the run parameters.\n\ncfg: A dictionary of Omniscape run parameters. See the Settings and Options section of the User Guide for descriptions of the run parameters and their default values. The in-memory method of run_omniscape ignores the following keys: resistance_file, source_file, reclass_table, condition1_file, condition2_file, condition1_future_file, and condition2_future_file. These all specify file paths, so they do not apply to the in-memory method of run_omniscape.\n\nresistance: A 2D, north-oriented array of resistance values. Use missing for NoData (infinite resistance). resistance cannot contain zeros or negative values.\n\nKeyword Arguments\n\nreclass_table:  A two column array. The first column contains the original resistance values in the resistance surface, and the second column specifies what those values should be changed to. You can reclassify values to missing to replace them with infinite resistance (NoData).\n\nsource_strength: A 2D, north-oriented array (with size equal to size(resistance)) of source strength values. source_strength is only required if source_from_resistance in cfg is set to \"false\" (the default value).\n\ncondition1: Optional. Required if conditional incfg is set to \"true\". A 2D, north-oriented array (with size equal to size(resistance)). See Climate Connectivity and Conditional Connectivity Options for more information.\n\ncondition2: Optional. Required if conditional incfg is set to \"true\" and n_conditions in cfg is set to \"2\". A 2D, north-oriented array (with size equal to size(resistance)). See Climate Connectivity and Conditional Connectivity Options for more information.\n\ncondition1_future: Optional. Required if conditional in cfg is set to \"true\" and compare_to_future in cfg is set to \"1\" or \"both\". A 2D, north-oriented array (with size equal to size(resistance)). See Climate Connectivity and Conditional Connectivity Options for more information.\n\ncondition2_future: Optional. A 2D, north-oriented array (with size equal to size(resistance)). See Climate Connectivity and Conditional Connectivity Options for more information. Required if conditional incfg is set to \"true\", n_conditions in cfg is set to \"2\", and compare_to_future in cfg is set to \"2\" or \"both\".\n\nwkt: Optionally specify a Well Known Text representation of the projection used for your spatial data inputs. Only used if Omniscape writes raster outputs to disk.\n\ngeotransform: In addition to wkt, optionally specify a geotransform. The geotransform is a 6-element vector with elements as follows for a north up oriented image: [<x coord of upper left orner>, <pixel width>, <row rotation (typically 0)>, <y coord of upper left corner>, <column rotation (typically 0)>, <pixel height (negative number)>]. Only used when writing raster outputs to disk.\n\nwrite_outputs: Boolean specifying if outputs should be written to disk. Defaults to false. If true, cfg must contain a value for the project_name key.\n\n\n\n\n\n","category":"function"},{"location":"apidocs/#Omniscape.missingarray","page":"API Documentation","title":"Omniscape.missingarray","text":"missingarray(A::Array{T, N}, T::DataType, nodata::Number)\n\nThis function converts an array to a MissingArray and replaces nodata values with missing in the output. MissingArray{T, N} is an alias  for Array{Union{T, Missing}, N}. This function can be used to prepare inputs for [run_omniscape`](@ref).\n\nParameters\n\nA: The array to convert.\n\nT: The data type for the output (e.g. Float64 or Float32).\n\nnodata: The numeric value to be replaced by missing in the result.\n\n\n\n\n\n","category":"function"},{"location":"apidocs/#Omniscape.missingarray_to_array","page":"API Documentation","title":"Omniscape.missingarray_to_array","text":"missing_array_to_array(A::MissingArray{T, N}, nodata::Number)\n\nThis function converts an array of type MissingArray to a numeric array  and replaces missing entries with nodata. MissingArray{T, N} is an alias  for Array{Union{T, Missing}, N}.\n\nParameters\n\nA: The array to convert.\n\nnodata: The numeric value with which missing values will be replaced in  the result.\n\n\n\n\n\n","category":"function"},{"location":"usage/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"usage/#Installation","page":"User Guide","title":"Installation","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"The latest version of Omniscape.jl requires Julia version 1.5.4 or greater. You can install Julia here. Once installation is complete, open a Julia terminal and run the following code to install Omniscape.jl.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"using Pkg; Pkg.add(\"Omniscape\")","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"If you want to install the latest (unreleased) development version of Omniscape.jl, you can get it by running:","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"using Pkg; Pkg.add(PackageSpec(name = \"Omniscape\", rev = \"main\"))","category":"page"},{"location":"usage/#Running-Omniscape","page":"User Guide","title":"Running Omniscape","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"For detailed examples of how to use Omniscape, check out the Examples section. Omniscape.jl provides a single user-facing function: run_omniscape.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"run_omniscape() offers two methods. The first, shown above, accepts the path to an INI file that specifies file paths for raster inputs and other user-specified options. An INI file can be created using any text editor (e.g. notepad) and saved with the .ini file extension. The following code block shows an example INI file. The headings in square brackets are not required. They are there for organization purposes and are ignored by run_omniscape().","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"[Required]\nresistance_file = resistance_surface.tif\nradius = 100\nblock_size = 5\nproject_name = output/example\n\n[General options]\nsource_from_resistance = true\nr_cutoff = 50\ncalc_normalized_current = true\n\nparallelize = true\nparallel_batch_size = 20\n\n[Output options]\nwrite_raw_currmap = true","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"The second method of run_omniscape accepts in-memory objects representing resistance and other spatial data inputs, and a dictionary specifying Omniscape settings and options.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"The full suite of settings that are supported are described in detail in Settings and Options below.","category":"page"},{"location":"usage/#Parallel-Processing","page":"User Guide","title":"Parallel Processing","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"Omniscape uses parallel processing by default, but currently, Julia requires that the number of parallel threads to use be specified by an environment variable called JULIA_NUM_THREADS. This environment variable needs to be defined prior to launching Julia. The following examples demonstrate how to set JULIA_NUM_THREADS and start up Julia to use 4 threads from your terminal.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"On Linux/Mac","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"export JULIA_NUM_THREADS=4\njulia","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"On Windows","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"set JULIA_NUM_THREADS=4\njulia","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"For Julia versions 1.5 and greater, you can now specify the number of threads with the -t flag when running Julia, e.g.:","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"julia -t 4","category":"page"},{"location":"usage/#Settings-and-Options","page":"User Guide","title":"Settings and Options","text":"","category":"section"},{"location":"usage/#Required","page":"User Guide","title":"Required","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"resistance_file: The path to the resistance layer input. This file can be in ASCII (.asc) or GeoTiff (.tif) format. If the file is in .asc format, Omniscape will also detect and use any associated .prj file in the same directory to determine the projection of the input file. The same applies for all other inputs described below that may be in .asc  format.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"radius: A positive integer specifying the radius in pixels of the moving window used to identify sources to connect to each target.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"project_name: The name of the project. Omniscape will create a directory called project_name in the directory from which you run Julia, and write any outputs to that directory. Supports the use of full path specification (e.g. path/to/directory).","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"If source_from_resistance (described below) is false:","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"source_file: The path to the source layer input. Must be an ASCII or GeoTIFF. This raster must have the same dimensions as resistance_file, and it is recommended that they have the exact same projection to ensure proper alignment. NoData values will be assigned a source strength of 0.  Does not need to be provided if source_from_resistance = true.","category":"page"},{"location":"usage/#Optional","page":"User Guide","title":"Optional","text":"","category":"section"},{"location":"usage/#General-Options","page":"User Guide","title":"General Options","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"block_size: An odd integer. Defaults to 1. An odd, positive integer specifying the side length for source layer blocking in target generation. The block size option coarsens the source strength surface for the purposes of identifying target pixels and assigning source strength values. The figure below shows two source strength grids. On the left is the case when block_size = 1. In this scenario, every pixel in the grid with a source strength greater than 0 (or, if specified, source_threshold, described below) will be a target pixel, and there will be a Circuitscape solve for each one of these pixels. The figure below and to the right represents the case when block_size = 3. In this case, the source strength grid is broken up into chunks of 9 pixels (3x3 blocks), each shown with a thick black outline. Only the centers of these 3x3 blocks (the white pixels) will be considered as potential target pixels. The maximum number of Circuitscape solves for this source grid is reduced from 81 when block_size = 1 to just 9 when block_size = 3. In the block_size = 3 case, the white pixels will be assigned a new source strength equal to the sum of the 9 pixels in the 3x3 block after setting any pixels with a source strength less than source_threshold to 0. This ensures that the total amount of current injected will be the same regardless of the value of block_size. Using a block_size > 1 can significantly reduce compute times and result in only negligable differences in the cumulative current map output.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"<table border=\"0\"><tr>\n<td>\n\t<figure>\n\t\t<img src='../figs/sources_block_of_1.png' alt='missing'><br>\n\t\t<figcaption><em>Block size of 1</em></figcaption>\n\t</figure>\n</td>\n<td>\n\t<figure>\n\t\t<img src='../figs/sources_block_of_3.png' alt='missing'><br>\n\t\t<figcaption><em>Block size of 3</em></figcaption>\n\t</figure>\n</td>\n</tr></table>","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"source_from_resistance: One of true, false. Should a source layer be derived using the resistance layer? If true, sources are calculated as the inverse of the resistance layer, and therefore it is not recommended that your resistance layer contain values less than 1. Sources will be set to 0 for all cells with a resistance greater than r_cutoff (described below). Defaults to false.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"resistance_is_conductance: One of true, false. Defaults to false. Specify whether the file specified by resistance_file is a conductance (rather than resistance) surface. Conductance is the inverse of resistance. Note that r_cutoff (an optional setting described below) must be in units of resistance even if a conductance file is supplied as input.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"r_cutoff: The maximum resistance value a cell can have to be included as a source. Only applies when source_from_resistance = true. Defaults to Inf (which allows all cells to be considered as sources regardless of the resistance value).","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"buffer: A positive integer. Defaults to 0. Specifies an additional buffer distance beyond radius to clip the resistance and source layers to for each moving window iteration. Any source pixels beyond the radius but within the buffered area are set to 0. If 0, resistance and source layers will be clipped to a circle of size radius for each moving window iteration.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"source_threshold: Positive number. Defaults to 0. Only pixels in the source layer greater than source_threshold will be included as sources.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"calc_normalized_current: One of true, false. Defaults to false. Specify whether to calculate normalized current flow. Normalized current is calculated as raw current divided by flow potential. If true, a normalized current flow raster called \"normalized_cum_currmap\" (with either .tif or .asc extension, see write_as_tif below) will be written to the project_name directory.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"calc_flow_potential: One of true, false. Defaults to false. Specify whether to calculate flow potential. Flow potential calculates current flow in \"null\" conditions, where the resistance of the entire landscape is 1. If true, a flow potential raster called \"flow_potential\" (with either .tif or .asc extension, see write_as_tif below) written to the project_name directory. This can still be set to false even if calc_normalized_current = true if you want to avoid writing the flow potential raster to disk.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"allow_different_projections: One of true, false. Defaults to false. If true, warnings about non-matching projections are suppressed.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"connect_four_neighbors_only: One of true, false. Defaults to false. Circuitscape creates a graph (network) by connecting cells to their four or eight immediate neighbors. The default is eight (four cardinal and four diagonal neighbors). Set connect_four_neighbors_only to true if you want to connect cells to their four cardinal neighbors only.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"solver: One of \"cg+amg\" or \"cholmod\". Defaults to \"cg+amg\". The linear solver method to use in Circuitscape. See the Circuitscape.jl paper, Anantharaman et al. (2019), for more information.","category":"page"},{"location":"usage/#Resistance-Reclassification","page":"User Guide","title":"Resistance Reclassification","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"Omniscape.jl allows you to reclassify categorical resistance surfaces internally based on a user-provided reclass table. This allows the user to avoid reclassifying rasters manually in a GIS, and can streamline your workflow.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"note: Note\nIf instead of a resistance raster, you provide Omniscape a conductance raster, then conductance is what Omniscape will reclassify based on the provided reclass table.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"reclassify_resistance: One of true, false. Defaults to false. Do you want Omniscape to reclassify your resistance/conductance raster using a reclass table that you provide?","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"reclass_table: If reclassify_resistance = true, the file path to the reclass table you wish to use. The reclass table is a two column, tab-separated .txt file. The first column contains the original resistance values in the resistance surface, and the second column specifies what those values should be changed to. You can reclassify values to missing to replace them with infinite resistance (NoData). Note that you don't need to include an entry for every value in your original raster. If you only want to reclassify two specific resistance values, then only include entries for those two values.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"Example reclass_table.txt:","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"1\t3\n2\t5\n3\t1\n4\t2\n5\tmissing","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"write_reclassified_resistance: One of true, false. Defaults to false. Should the reclassified resistance/conductance raster be saved to the output folder?","category":"page"},{"location":"usage/#Processing-Options","page":"User Guide","title":"Processing Options","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"parallelize: One of true, false. Defaults to true. Specify whether to use parallel processing.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"parallel_batch_size: Integer. Defaults to 10. The batch size (number of jobs) to send to each parallel worker. Particularly in cases where single solves are very fast, setting this to a larger number can reduce I/O overhead when scheduling/sending jobs to parallel workers. If set too high, then you will not be fully utilizing parallel workers.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"precision: One of single, double. Defaults to double. Single precision uses less memory, but is less accurate than double precision. In certain cases (e.g. with extremelely large resistance values and/or extremely small source strengths), computations with single precision may be subject to numerical underflow, resulting in incorrect results. Use single precision with caution.","category":"page"},{"location":"usage/#Output-Options","page":"User Guide","title":"Output Options","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"write_raw_currmap: One of true, false. Defaults to true. Save the raw cumulative current map to disk? Should always be set to true unless calc_flow_potential, calc_normalized_current, or both are true and you do not need the raw current output. If true, the cumulative current map is saved to disk as a raster called \"flowpotential\" with either a .tif or .asc extension (see `writeastifbelow) in theprojectname` directory.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"mask_nodata: One of true, false. Defaults to true. Specify whether to mask current flow outputs according to NoData values in resistance surface. (i.e. pixels in current flow outputs that line up with NoData values in resistance are set to no data if mask_nodata = true).","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"write_as_tif: One of true, false. Defaults to true. Should outputs be written in tif format? If false, outputs are written in .asc format.","category":"page"},{"location":"usage/#Conditional-Connectivity-Options","page":"User Guide","title":"Conditional Connectivity Options","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"conditional: One of true, false. Defaults to false. Should conditional source/target matching be used? That is, should a given target only be connected to sources that meet similarity conditions to the target? If false, none of the options described below are needed. If true, then gridded data with values for each pixel are used to compare targets and sources and determine which pairs should be connected according to user-specified criteria.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"n_conditions: One of 1, 2. Defaults to 1. The number of conditions to use for conditional source/target matching.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"If n_conditions = 1:","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"condition1_file: The file path to the data representing condition one in present day. Only needed if conditional = true. Must be an ASCII or GeoTIFF. This raster must have the same dimensions as resistance_file, and it is recommended that it also has the exact same projection to ensure proper alignment. Ensure that every pixel in the source strength raster has a corresponding value (not NoData) in condition1_file.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"comparison1: One of within or equal. Defaults to within. How should conditions be compared when determining whether to connect a source/target pair. If within, then the value of condition 1 for the source must be within the following range, where target is the value at the target pixel or block: (target + condition1_lower, target + condition1_upper).  condition1_lower and condition1_upper are explained further below. If equal, then the value at the source pixel must be equal to the value at the target pixel.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"condition1_lower: Number. Only required if comparison1 = within. If condition1_lower = -1, then a source may have a condition 1 value up to 1 unit smaller than the target's value to be connected.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"condition1_upper: Number. Only required if comparison1 = within. If condition1_upper = 1, then a source may have a condition 1 value up to 1 unit larger than the target's value and it will still be connected.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"If n_conditions = 2:","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"condition2_file: The file path to the data representing condition two in present day. Only needed if conditional = true and n_conditions = 2. Must be an ASCII or GeoTIFF. This raster must have the same dimensions as resistance_file, and it is recommended that it also has the exact same projection to ensure proper alignment. Ensure that every pixel in the source strength raster has a corresponding value (not NoData) in condition2_file.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"comparison2: One of within or equal. Defaults to within. Only applies if n_conditions = 2. How should conditions be compared when determining whether to connect a source/target pair. If within, then the value of condition 2 for the source must be within the following range, where target is the value at the target pixel or block: (target + condition2_lower, target + condition2_upper).  condition2_lower and condition2_upper are explained further below. If equal, then the value at the source pixel must be equal to the value at the target pixel.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"condition2_lower: Number. Only required if n_conditions = 2 and comparison1 = within. If condition2_lower = -1, then a source may have a condition 2 value up to 1 unit smaller than the target's value and it will still be connected.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"condition2_upper: Number. Only required if n_conditions = 2 and comparison1 = within. If condition2_lower = 1, then a source may have a condition 2 value up to 1 unit larger than the target's value and it will still be connected.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"Using future conditions:","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"compare_to_future: One of none, 1, 2, or both. Which condition(s) should compare the future condition in targets with present-day conditions in sources when determining which pairs to connect? For any condition(s) specified in this option, two data layers are needed: one with future condition values for all pixels in the study area, and one for present day condition values for all pixels in the study area. Defaults to \"none\".","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"condition1_future_file: The file path to the data representing condition one in the future. Only needed if compare_to_future = 1 or compare_to_future = both. Must be an ASCII or GeoTIFF. This raster must have the same dimensions as resistance_file, and it is recommended that they have the exact same projection to ensure proper alignment. Ensure that every pixel in the source strength raster has a corresponding value (not NoData) in condition1_future_file.","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"condition2_future_file: The file path to the data representing condition two in the future. Only needed if n_conditions = 2 and compare_to_future = 2 or compare_to_future = both. Must be an ASCII or GeoTIFF. This raster must have the same dimensions as resistance_file, and it is recommended that they have the exact same projection to ensure proper alignment. Ensure that every pixel in the source strength raster has a corresponding value (not NoData) in condition2_future_file.","category":"page"},{"location":"usage/#Omniscape-in-Docker","page":"User Guide","title":"Omniscape in Docker","text":"","category":"section"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"A Docker image with the latest version of Omniscape is available on Docker Hub. To pull the image and start the Docker container from your terminal, navigate to the directory containing your Omniscape input files via cd and run the following code (set JULIA_NUM_THREADS to the number of threads you want to use for parallel processing):","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"On Linux/Mac:","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"docker run -it --rm \\\n\t-v $(pwd):/home/omniscape \\\n\t-w /home/omniscape \\\n\t-e JULIA_NUM_THREADS=2 \\\n\tvlandau/omniscape:latest","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"On Windows (via Windows Command Line):","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"docker run -it --rm^\n -v %cd%:/home/omniscape^\n -w /home/omniscape^\n -e JULIA_NUM_THREADS=2^\n vlandau/omniscape:latest","category":"page"},{"location":"usage/","page":"User Guide","title":"User Guide","text":"The -v flag and subsequent code will mount the files in your current working directory and make them available to the Docker container (which is why you need to run the code above from the directory that contains your input files). Once you're in Julia in the Docker container, you're ready to go! Make sure that the file paths in your .ini file are relative to the working directory from which you ran Docker.","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Forest-connectivity-in-central-Maryland","page":"Examples","title":"Forest connectivity in central Maryland","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Land cover datasets are commonly used to parameterize resistance for connectivity modeling. This example uses the National Land Cover Dataset for the United States to model forest connectivity in central Maryland. Each value in the categorical land cover dataset is assigned a resistance score. We can have Omniscape.jl assign these values internally by providing a reclassification table (see Resistance Reclassification).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, install the necessary packages and import them:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Pkg; Pkg.add([\"Omniscape\", \"GeoData\", \"Plots\"])\nusing Omniscape, GeoData, Plots","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Pkg; Pkg.add([\"Omniscape\", \"GeoData\", \"Plots\"])\nusing Omniscape, GeoData, Plots\nurl_base = \"https://raw.githubusercontent.com/Circuitscape/datasets/main/\"\ndownload(string(url_base, \"data/nlcd_2016_frederick_md.tif\"),\n         \"nlcd_2016_frederick_md.tif\")\nnothing","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, download the landcover data we'll use in this example, and plot it:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"url_base = \"https://raw.githubusercontent.com/Circuitscape/datasets/main/\"\n# Download the NLCD tile used to create the resistance surface and load it\ndownload(string(url_base, \"data/nlcd_2016_frederick_md.tif\"),\n         \"nlcd_2016_frederick_md.tif\")\n\n# Plot the landcover data\nvalues = [11, 21, 22, 23, 24, 31, 41, 42, 43, 52, 71, 81, 82, 90, 95]\npalette = [\"#476BA0\", \"#DDC9C9\", \"#D89382\", \"#ED0000\", \"#AA0000\",\n           \"#b2b2b2\", \"#68AA63\", \"#1C6330\", \"#B5C98E\", \"#CCBA7C\",\n           \"#E2E2C1\", \"#DBD83D\", \"#AA7028\", \"#BAD8EA\", \"#70A3BA\"]\n\nplot(GeoArray(GDALarray(\"nlcd_2016_frederick_md.tif\")),\n     title = \"Land Cover Type\", xlabel = \"Easting\", ylabel = \"Northing\",\n     seriescolor = cgrad(palette, (values .- 12) ./ 84, categorical = true),\n     size = (700, 640))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<img src='../figs/mdlc.png' width=500><br>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now, load the array using Omniscape's internal read_raster() function or a function from a GIS Julia package of your choice. read_raster() returns a tuple with the data array, a wkt string containing geographic projection info, and an array containing geotransform values. We'll use the wkt and geotransform later.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"land_cover, wkt, transform = Omniscape.read_raster(\"nlcd_2016_frederick_md.tif\", Float64)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The next step is to create a resistance reclassification table that defines a resistance value for each land cover value. Land cover values go in the left column, and resistance values go in the right column. In this case, we are modeling forest connectivity, so forest classes receive the lowest resistance score of one. Other \"natural\" land cover types are assigned moderate values, and human-developed land cover types are assigned higher values. Medium- to high-intensity development are given a value of missing, which denotes infinite resistance (absolute barriers to movement).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Create the reclassification table used to translate land cover into resistance\nreclass_table = [\n    11.\t100; # Water\n    21\t500; # Developed, open space\n    22\t1000; # Developed, low intensity\n    23\tmissing; # Developed, medium intensity\n    24\tmissing; # Developed, high intensity\n    31\t100; # Barren land\n    41\t1; # Deciduous forest\n    42\t1; # Evergreen forest\n    43\t1; # Mixed forest\n    52\t20; # Shrub/scrub\n    71\t30; # Grassland/herbaceous\n    81\t200; # Pasture/hay\n    82\t300; # Cultivated crops\n    90\t20; # Woody wetlands\n    95\t30; # Emergent herbaceous wetlands\n]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, we define the configuration options for this model run. See the Settings and Options section in the User Guide for more information about each of the configuration options.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Specify the configuration options\nconfig = Dict{String, String}(\n    \"radius\" => \"100\",\n    \"block_size\" => \"21\",\n    \"project_name\" => \"md_nlcd_omniscape_output\",\n    \"source_from_resistance\" => \"true\",\n    \"r_cutoff\" => \"1\", # Only forest pixels should be sources\n    \"reclassify_resistance\" => \"true\",\n    \"calc_normalized_current\" => \"true\",\n    \"calc_flow_potential\" => \"true\"\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Finally, compute connectivity using run_omniscape(), feeding in the configuration dictionary, the resistance array, the reclass table, as well as the wkt and geotransform information loaded earlier. Passing in the wkt and geotransform, along with true for the write_outputs argument, will allow Omniscape to write the outputs as properly projected rasters. run_omniscape will print some information to the console and show progress, along with an ETA, in the form of a progress bar.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"currmap, flow_pot, norm_current = run_omniscape(config,\n                                                land_cover,\n                                                reclass_table = reclass_table,\n                                                wkt = wkt,\n                                                geotransform = transform,\n                                                write_outputs = true)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You'll see that outputs are written to a new folder called \"md_nlcd_omniscape_output\". This is specified by the \"project_name\" value in config above. The cumulative current map will always be called \"cum_currmap.tif\", and it will be located in the output folder. We also specified in the run configuration that flow potential and normalized current should be computed as well. These are called \"potential_potential.tif\" and \"normalized_cum_currmap.tif\", respectively. See Outputs for a description of each of these outputs.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now, plot the outputs. Load the outputs into Julia as spatial data and plot them.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, the cumulative current map:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"current = GDALarray(\"md_nlcd_omniscape_output/cum_currmap.tif\")\nplot(current,\n     title = \"Cumulative Current Flow\", xlabel = \"Easting\", ylabel = \"Northing\",\n     seriescolor = cgrad(:inferno, [0, 0.005, 0.03, 0.06, 0.09, 0.14]),\n     size = (600, 550))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<img src='../figs/md-curmap.png' width=500> <br><em>Cumulative current flow representing forest connectivity. Note that areas in white correspond to built up areas (NLCD values of 23 and 24) that act as absolute barriers to movement.</em><br><br>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, flow potential. This map shows what connectivity looks like under \"null\" conditions (resistance equals 1 for the whole landscape).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"fp = GDALarray(\"md_nlcd_omniscape_output/flow_potential.tif\")\nplot(fp,\n     title = \"Flow Potential\", xlabel = \"Easting\", ylabel = \"Northing\",\n     seriescolor = cgrad(:inferno, [0, 0.005, 0.03, 0.06, 0.09, 0.14]),\n     size = (700, 640))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<img src='../figs/md-fp.png' width=500> <br><em>Flow potential, which shows what connectivity would look like in the absence of barriers to movement. The blocking that you can see is an artifact of setting a large block_size to make the example run faster. Set a smaller block_size to reduce/remove this issue.</em><br><br>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Finally, map normalized current flow, which is calculated as flow potential divided by cumulative current.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"normalized_current = GDALarray(\"md_nlcd_omniscape_output/normalized_cum_currmap.tif\")\nplot(normalized_current,\n     title = \"Normalized Current Flow\", xlabel = \"Easting\", ylabel = \"Northing\",\n     seriescolor = cgrad(:inferno, [0, 0.005, 0.03, 0.06, 0.09, 0.14]),\n     size = (700, 640))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<img src='../figs/md-norm-cur.png' width=500> <br><em>Normalized cumulative current. Values greater than one indicate areas with channelized/bottlenecked flow. Values around 1 (cumulative current ≈ flow potential) indicate diffuse current. Values less than 1 indicate impeded flow.</em><br><br>","category":"page"},{"location":"algorithm/#How-It-Works","page":"How It Works","title":"How It Works","text":"","category":"section"},{"location":"algorithm/#The-Omniscape-Algorithm","page":"How It Works","title":"The Omniscape Algorithm","text":"","category":"section"},{"location":"algorithm/","page":"How It Works","title":"How It Works","text":"The Omniscape algorithm works by applying Circuitscape iteratively through the landscape in a moving window with a user-specified radius. Omniscape requires two basic inputs: a resistance raster, and a source strength raster. The resistance raster defines the traversal cost for every pixel in the landscape. The source strength raster defines for every pixel the relative amount of current to be injected into that pixel. A diagram of the moving window, adapted and borrowed from McRae et al. 2016, is shown in figure 1 below.","category":"page"},{"location":"algorithm/","page":"How It Works","title":"How It Works","text":"<img src='../figs/moving_window.png' width=350)> <br><em><b>Figure 1</b>: An illustration of a moving window iteration in the Omniscape algorithm.</em><br><br>","category":"page"},{"location":"algorithm/","page":"How It Works","title":"How It Works","text":"The algorithm works as follows:","category":"page"},{"location":"algorithm/","page":"How It Works","title":"How It Works","text":"The window centers on a pixel in the source strength surface that has a source strength greater than 0 (or a user specified threshold). This is referred to as the target pixel.\nThe source strength and resistance rasters are clipped to the circular window.\nEvery source pixel within the search radius that also has a source strength greater than 0 is identified. These are referred to as the source pixels.\nCircuitscape is run using the clipped resistance raster in “advanced” mode, where the target pixel is set to ground, and the source pixels are set as current sources. The total amount of current injected is equal to the source strength of the target pixel, and is divvied up among the source pixels in proportion to their source strengths.\nSteps 1-4 are repeated for every potential target pixel. The resulting current maps are summed to get a map of cumulative current flow.","category":"page"},{"location":"algorithm/","page":"How It Works","title":"How It Works","text":"The Omniscape algorithm evaluates connectivity between every possible pair of pixels in the landscape that are a) valid sources (i.e. have a source strength greater than 0 or other user-specified threshold) and b) no further apart than the moving window radius.","category":"page"},{"location":"#Omniscape.jl","page":"About","title":"Omniscape.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Package repository: https://github.com/Circuitscape/Omniscape.jl","category":"page"},{"location":"","page":"About","title":"About","text":"note: Note\nBefore proceeding, it is strongly recommended that you familiarize yourself with the circuit theoretic approach to modeling landscape connectivity. See McRae 2006 and McRae et al. 2008 to learn more. See Anantharaman et al. 2020 for more on Circuitscape.jl.","category":"page"},{"location":"#Table-of-Contents","page":"About","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Pages = [\"index.md\", \"algorithm.md\",\"usage.md\", \"examples.md\", \"apidocs.md\"]\nDepth = 2","category":"page"},{"location":"#About-Omniscape.jl","page":"About","title":"About Omniscape.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Omniscape.jl implements the Omniscape connectivity algorithm developed by McRae et al. (2016). This software package can be used to produce maps of omni-directional habitat connectivity useful for scientific research as well as landscape management and conservation. Omniscape.jl is built on Circuitscape.jl. It offers a unique approach to connectivity modeling, particularly among circuit theoretic methods, by allowing the sources, destinations, and intensity of animal movement or ecological flow (modeled as electrical current) to be informed by continuous spatial data (such as a habitat suitability map). This information is combined with other spatial information on landscape resistance to movement or flow to produce models of habitat connectivity. To learn about how the algorithm works, see The Omniscape Algorithm. Check out the Examples section for a step-by-step demonstration of how to use Omniscape.jl.","category":"page"},{"location":"#Outputs","page":"About","title":"Outputs","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Omniscape.jl provides three different outputs.","category":"page"},{"location":"","page":"About","title":"About","text":"Cumulative current flow: the total current flowing through the landscape – the result of the Omniscape algorithm described above.\nFlow potential (optional): current flow under \"null\" resistance conditions. Flow potential demonstrates what movement/flow would look like when movement is unconstrained by resistance and barriers. Flow potential is calculated exactly as cumulative current flow is, but with resistance set to 1 for the entire landscape.\nNormalized current flow (optional): calculated as cumulative current flow divided by flow potential. Normalized current helps identify areas where current is impeded or channelized (e.g. more or less current than expected under null resistance conditions). High values mean current flow is channelized, low values mean current is impeded.","category":"page"},{"location":"#Climate-Connectivity","page":"About","title":"Climate Connectivity","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Climate connectivity can be modeled using the conditional connectivity options in Omniscape. These options options allow the user to impose extra constraints on source and target identification and matching. For example the present day climate of the source pixels might be required to be similar to the projected future climate for the target pixel. Info on constraints is provided to Omniscape via raster layers. See the documentation on Conditional Connectivity Options for more info on how to implement this feature.","category":"page"},{"location":"#Citing-Omniscape.jl","page":"About","title":"Citing Omniscape.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Please cite Landau et al. (2021) when using Omniscape.jl.","category":"page"},{"location":"","page":"About","title":"About","text":"Landau, V.A., V.B. Shah, R. Anantharaman, and K.R. Hall. 2021. Omniscape.jl: Software to compute omnidirectional landscape connectivity. Journal of Open Source Software, 6(57), 2829.","category":"page"},{"location":"","page":"About","title":"About","text":"Here's a bibtex entry:","category":"page"},{"location":"","page":"About","title":"About","text":"@article{Landau2021,\n  doi = {10.21105/joss.02829},\n  url = {https://doi.org/10.21105/joss.02829},\n  year = {2021},\n  publisher = {The Open Journal},\n  volume = {6},\n  number = {57},\n  pages = {2829},\n  author = {Vincent A. Landau and Viral B. Shah and Ranjan Anantharaman and Kimberly R. Hall},\n  title = {Omniscape.jl: Software to compute omnidirectional landscape connectivity},\n  journal = {Journal of Open Source Software}\n}\n","category":"page"},{"location":"","page":"About","title":"About","text":"Be sure to also cite the original work where the Omniscape algorithm was first described:","category":"page"},{"location":"","page":"About","title":"About","text":"McRae, B. H., K. Popper, A. Jones, M. Schindel, S. Buttrick, K. R. Hall, R. S. Unnasch, and J. Platt. 2016. Conserving Nature’s Stage: Mapping Omnidirectional Connectivity for Resilient Terrestrial Landscapes in the Pacific Northwest. The Nature Conservancy, Portland, Oregon.","category":"page"},{"location":"#Acknowledgments","page":"About","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Development of this software package was made possible by funding from NASA's Ecological Forecasting program and the Wilburforce Foundation through a project led by Kim Hall at The Nature Conservancy. This software package would not have been possible without Brad McRae (1966-2017), the visionary behind Circuitscape, the Omniscape algorithm, and several other software tools for assessing connectivity. Omniscape.jl is built on Circuitscape.jl, which was authored by Ranjan Anantharaman and Viral Shah, both of whom have been incredibly helpful in steering and guiding the development of Omniscape.jl. Kim Hall, Aaron Jones, Carrie Schloss, Melissa Clark, Jim Platt, and early Omniscape.jl users helped steer software development by providing valuable feedback and insight.","category":"page"},{"location":"#References","page":"About","title":"References","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Anantharaman, R., Hall, K., Shah, V., & Edelman, A. (2020). Circuitscape in Julia: Circuitscape in Julia: High Performance Connectivity Modelling to Support Conservation Decisions. Proceedings of the JuliaCon Conferences. DOI: 10.21105/jcon.00058.","category":"page"},{"location":"","page":"About","title":"About","text":"McRae, B. H. (2006). Isolation by resistance. Evolution, 60(8), 1551-1561.","category":"page"},{"location":"","page":"About","title":"About","text":"McRae, B. H., Dickson, B. G., Keitt, T. H., & Shah, V. B. (2008). Using circuit theory to model connectivity in ecology, evolution, and conservation. Ecology, 89(10), 2712-2724.","category":"page"},{"location":"","page":"About","title":"About","text":"McRae, B. H., Popper, K., Jones, A., Schindel, M., Buttrick, S., Hall, K., Unnasch, B. & Platt, J. (2016). Conserving nature’s stage: mapping omnidirectional connectivity for resilient terrestrial landscapes in the Pacific Northwest. The Nature Conservancy, Portland, Oregon.","category":"page"}]
}
